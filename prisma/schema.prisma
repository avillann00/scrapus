// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  names String[]
  email String @unique
  password String

  albums Album[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id String @id @default(uuid())
  title String
  tags String[]
  coverUrl String?

  user User @relation(fields: [userId], references: [id])
  userId String

  photos Photo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id       String @id @default(uuid())
  title    String
  tags     String[]
  photoUrl String
  caption  String?

  userId String
  album  Album @relation(fields: [albumId], references: [id])
  albumId String

  song    Song? @relation(fields: [songId], references: [id])
  songId  String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id        String   @id @default(uuid())
  name      String
  previewUrl String?
  uri       String

  albumId   String
  album     SongAlbum @relation(fields: [albumId], references: [id])

  artists   SongArtist[]
  photo     Photo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SongAlbum {
  id        String   @id @default(uuid())
  name      String
  images    String[]  // store array of URLs

  songs     Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id        String   @id @default(uuid())
  name      String
  songs     SongArtist[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongArtist {
  songId   String
  artistId String

  song     Song   @relation(fields: [songId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])

  @@id([songId, artistId]) 
}
